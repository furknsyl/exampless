'''

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

'''
##python.txt
s='Python is a very useful programming language.'

x=s.replace("useful","IMPORTANT")

print(x)

count=0

for i in range(0,len(s)):
    if s[i] == " ":
        count += 1
        
print(count)

f= open('text.txt')
text= f.read()
the_letters=[]
for i in range(125):
    the_letters.append(0)

print(the_letters)
print(len(text))    
 
for x in text:
    num= ord(x.lower())
    if num > 65 and num < 123:
        the_letters[num]+=1

for i in range (len(the_letters)):
    if the_letters[i] > 0:
        print(chr(i),the_letters[i])
        
        
        
        
f = open( (text. txt')
text = f. read()
the_letters =[]
 d = len(text)
 print ("\nEnglish text - total number of letters in the text is " + str(d) +'\n')
 for i in range(125):
    the_letters.append(0)
 for x in text:
     num 1 = ord(x. .lower())
     if num > 65 and num < 123:
         the_letters[ [num] += 1
print("%6s %5s %10s" %( 'letter', 'amount', 'frequency' ) )
 for i in range(len( (the letters)):
     if the_letters[i] > 0:
         print("3s %7d %9.1f" %( chr(i), the_letters[i],


##smallest multiple
num = 1
while True:
    stn = True
    for i in range(1, 21):
        if num % i != 0:
            stn = False
            break
    if stn:
        print(num)
        break
    num += 1

##largest polindrome

#include <stdio.h>

largest= 0

for i in range(900, 1000):
    for j in range(900, 1000):
        num = i * j
        if str(num) == str(num)[::-1]:
            if num > largest:
                largest= num

print(largest)

##largest prime

def prime(n):
    x = []
    for num in range(1, n + 1):  
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break  
            else:
                x.append(num)
    return x



n  = 600851475143

primes = prime(10000)

for x in primes:
    if n % x == 0:
        print(x) 

 ##multiple 3-5below

 total=0

for i in range(1,1000):
    if i%3==0 or i % 5==0:
        total +=i

print(total)  

##letters.py

#letters.py
# -*- coding: utf-8 -*-

s = '''
Ukraiński portal opisał niecodzienną sytuację spod Lwowa. Lokalny kierowca realizował codzienny kurs, gdy jedna z pasażerek zaczęła wykrzykiwać prorosyjskie hasła. Początkowo nic nie robił sobie ze słów kobiety, tylko prosił, żeby nie przeszkadzała innym. Jednak zachowanie kobiety było coraz bardziej agresywne, nie chciała się uspokoić, zaczęła krzyczeć.
Ala ma kota, a Ola ma psa. Będę zajmował się Pythonem bardzo intensywnie.
'''

chars = []
for i in range(455):
  chars.append(0)

for letter in s:
  indeks = ord(letter) - 1
  chars[indeks] += 1

d = len(chars)
X = []
Y = []

for i in range(d):
  #if chars[i]>0 and (i+1)>=97 and (i+1)<=122:
  #    X.append(chr(i+1))
  #    Y.append(chars[i])
  if chars[i] > 0 and (i + 1) >= 64:
    X.append(chr(i + 1))
    Y.append(chars[i])

#print (Y)
sum_y = sum(Y)
print('All small letters in the text: ', sum_y)
print('\nThe frequency of letters in %:\n ')

for i in range(len(X)):
  Y[i] = round(100.0 * Y[i] / sum_y, 1)
  if Y[i] > 0:
    print('%5s %10.1f' % (X[i], Y[i]))

from bokeh.io import output_file, show
from bokeh.plotting import figure

output_file("letters_freq.html")
p = figure(x_range=X,
           height=250,
           title="Letters Frequences in English Text",
           toolbar_location=None,
           tools="")

p.vbar(x=X, top=Y, width=0.4)

p.xgrid.grid_line_color = None
p.y_range.start = 0

show(p)
